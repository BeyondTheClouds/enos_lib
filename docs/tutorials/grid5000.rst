*******************
Provider::Grid'5000
*******************

This tutorial illustrates the use of EnOSlib to interact with Grid'5000. For a
full description of the API and the available options, please refer to the API
documentation of the Grid'5000 provider.

.. hint::

   For a complete schema reference see :ref:`grid5000-schema`

.. include:: ./setup_g5k.rst


Basic example
=============

We'll implement a basic workflow where 2 nodes are reserved and 2 roles are
described. Nodes are here put in a dedicated vlan.


Build the configuration from a dictionnary
------------------------------------------


.. literalinclude:: grid5000/tuto_grid5000.py
   :language: python
   :linenos:

- You can launch the script using :

    .. code-block:: bash

        $ python tuto_grid5000.py


- The content of the generated inventory should looks like the following:

    .. literalinclude:: grid5000/hosts
     :language: python

  .. note::

       - Inventory can be used to feed an Ansible deployment (see the
         :ref:`Ansible integration<integration-with-ansible>`)
       - Compared to the vagrant provider, Grid'5000 requires a more precise
         network description that should map what is available on the platform.

Build the configuration programmatically
----------------------------------------

The above script can be rewritten using the programmatc API.

.. literalinclude:: grid5000/tuto_grid5000_p.py
   :language: python
   :linenos:

.. note::

   Here we first create a network and pass its reference to each group of
   machine to configure the first interface of the Grid'5000 nodes.


Using a custom environment
==========================

First, the description file of your environment should use resolvable URIs for the kadeploy3 server. 
An example of such description is the following

.. code-block:: yaml

    # myimage.desc and myimage.tgz are both located in
    # the public subdirectory of rennes site of the user {{ login }}
    ---
    name: ubuntu1804-x64-min
    version: 2019052116
    description: ubuntu 18.04 (bionic) - min
    author: support-staff@list.grid5000.fr
    visibility: public
    destructive: false
    os: linux
    image:
    file: https://api.grid5000.fr/sid/sites/rennes/public/{{ login }}/myimage.tgz
    kind: tar
    compression: gzip
    postinstalls:
    - archive: server:///grid5000/postinstalls/g5k-postinstall.tgz
    compression: gzip
    script: g5k-postinstall --net netplan
    boot:
    kernel: "/vmlinuz"
    initrd: "/initrd.img"
    filesystem: ext4
    partition_type: 131
    multipart: false

Then in the configuration of the Grid'5000 provider you can specidy the following:

.. code-block:: yaml

    job_name: test_myimage
    ...
    env_name: https://api.grid5000.fr/sid/sites/rennes/public/{{ login }}/myimage.desc
    ...
    resources:
    ...


Subnet reservation
==================


This shows how to deal with a subnet reservation

Build the configuration from a dictionnary
------------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_subnet.py
    :language: python
    :linenos:

Build the configuration programmatically
----------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_subnet_p.py
    :language: python
    :linenos:


Non deploy reservation
======================


The following shows how to deal with a non deploy reservation. Root ssh access
will be granted to the nodes. For this purpose you must have a
``~/.ssh/id_rsa.pub`` file available. All the connections will be done as root
user allowing to mimic the behaviour of deploy jobs (without the kadeploy3
step). This is particularly interesting if your deployment does't require more
than one network interface.

Build the configuration from a dictionnary
------------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_non_deploy.py
    :language: python
    :linenos:

Build the configuration programmatically
----------------------------------------

.. literalinclude:: grid5000/tuto_grid5000_non_deploy_p.py
    :language: python
    :linenos:


Start Virtual Machines on nodes
===============================


.. hint::
  Note that it is now possible to use the ``VMonG5k`` provider directly. This
  provider will handle the reservation and deployment of virtual machines in an
  atomic way. The following example illustrates a mixed environment where some virtual
  machines are started on specific nodes of your reservation.


.. literalinclude:: grid5000/tuto_grid5000_p_virt.py
    :language: python
    :linenos:
