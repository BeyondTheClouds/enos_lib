Tutorial 2 - Working with Grid'5000
===================================

Let's adapt the vagrant tutorial to Grid'5000.

Installation
------------

On Grid'5000, you can go with a virtualenv :

.. code-block:: bash

    $ virtualenv venv
    $ source venv/bin/activate
    $ pip install -U pip

    $ pip install enoslib

Using the API
-------------

The following ``tuto_grid5000.py`` implements the desired workflow.

.. literalinclude:: grid5000/tuto_grid5000.py
   :language: python
   :linenos:

- You can launch the script using :

    .. code-block:: bash

        $ python tuto_grid5000.py


- The content of the generated inventory should looks like the following:

    .. literalinclude:: grid5000/hosts
     :language: python

.. note::

    Compared to the vagrant provider, Grid'5000 requires a more precise
    network description that should map what is available on the platform.


Subnet reservation
------------------

The following ``tuto_grid5000_subnet.py`` shows how to deal with a subnet reservation.

.. literalinclude:: grid5000/tuto_grid5000_subnet.py
    :language: python
    :linenos:


Non deploy reservation
----------------------

The following ``tuto_grid5000_non_deploy.py`` shows how to deal with a non
deploy reservation. Root ssh access will be granted to the nodes. For this
purpose you must have a ``~/.ssh/id_rsa.pub`` file available. All the
connections will be done as root user allowing to mimic the behaviour of deploy
jobs (without the kadeploy3 step). This is particularly interesting if your
deployment does't require more than one network interface.

.. literalinclude:: grid5000/tuto_grid5000_non_deploy.py
    :language: python
    :linenos:



